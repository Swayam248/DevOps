pipeline {
    agent any
    environment {
        TOMCAT_USER = 'deployer'
        TOMCAT_PASS = 'deployer'
        TOMCAT_HOST = '44.204.90.170'
        TOMCAT_PORT = '8080'
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Swayam248/Devops-Project.git'
            }
        }
        stage('Build with Maven') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Deploy to Tomcat') {
            steps {
                sh '''
                    curl -u $TOMCAT_USER:$TOMCAT_PASS \
                    --upload-file webapp/target/webapp.war \
                    "http://$TOMCAT_HOST:$TOMCAT_PORT/manager/text/deploy?path=/webapp&update=true"
                '''
            }
        }
        stage('Deploy to Docker Host') {
            steps {
                sshPublisher(publishers: [
                    sshPublisherDesc(
                        configName: 'docker', 
                        transfers: [
                            sshTransfer(
                                sourceFiles: '**/*',
                                removePrefix: '',
                                remoteDirectory: 'images',
                                execCommand: '''
                                    cd images
                                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 792443373642.dkr.ecr.us-east-1.amazonaws.com
                                    docker build -t tomcat-webapp1 .
                                    docker tag tomcat-webapp1:latest 792443373642.dkr.ecr.us-east-1.amazonaws.com/tomcat-webapp1:latest
                                    docker push 792443373642.dkr.ecr.us-east-1.amazonaws.com/tomcat-webapp1:latest
                                '''
                            )
                        ]
                    )
                ])
            }
        }
       stage('Deploy to EKS') {
    steps {
        sshPublisher(publishers: [
            sshPublisherDesc(
                configName: 'kubernetes',
                transfers: [
                    sshTransfer(
                        sourceFiles: 'deployment.yaml,service.yaml',
                        remoteDirectory: '', // adjust as needed
                        removePrefix: '',
                        execCommand: '''
                            set -ex
                            aws eks update-kubeconfig --region us-east-1 --name my-cluster
                            kubectl delete -f deployment.yaml
                            kubectl apply -f  deployment.yaml
                            kubectl apply -f service.yaml
                            kubectl rollout status deployment/regapp-deployment
                        '''
                    )
                ],
                usePromotionTimestamp: false,
                verbose: true
            )
        ])
    }
}
    }
    post {
        success {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
        }
    }
}